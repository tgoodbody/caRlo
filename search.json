[{"path":"https://tgoodbody.github.io/caRlo/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 caRlo authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tgoodbody.github.io/caRlo/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tristan R.H. Goodbody. Author, maintainer.","code":""},{"path":"https://tgoodbody.github.io/caRlo/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Goodbody T (2023). caRlo: Ger GEDI data compare ALS. R package version 0.0.1, https://tgoodbody.github.io/caRlo/.","code":"@Manual{,   title = {caRlo: Ger GEDI data and compare to ALS},   author = {Tristan R.H. Goodbody},   year = {2023},   note = {R package version 0.0.1},   url = {https://tgoodbody.github.io/caRlo/}, }"},{"path":"https://tgoodbody.github.io/caRlo/index.html","id":"carlo","dir":"","previous_headings":"","what":"caRlo","title":"caRlo","text":"goal caRlo perform monte carlo sampling simulations, calculate statistics sample iterations, bootstrap statistics, visualize statistical outputs.","code":""},{"path":"https://tgoodbody.github.io/caRlo/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"caRlo","text":"can install development version caRlo GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"tgoodbody/caRlo\")"},{"path":"https://tgoodbody.github.io/caRlo/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"caRlo","text":"basic example shows solve common problem:","code":"#--- load internal data ---#  plots stats bootstraps  #--- fake population mean and median ---# population <-  data.frame(median = 1.1, mean = 2.2)  #--- piped & parallel ---#  cores <- 5 # number of cores iter <- 10 # number of monte carlo simulations per sample size  #--- sample - generate stats - bootstrap stats ---# monte_carlo(plots, nSamp = c(50, 100, 150), iter = 10, cores = cores) %>%   stats_nested(cores = cores) %>%   bootstrap_stats(., population = population, cores = cores)"},{"path":"https://tgoodbody.github.io/caRlo/index.html","id":"internal-data-for-testing","dir":"","previous_headings":"","what":"Internal data for testing","title":"caRlo","text":"","code":"#--- raw plots plots <- caRlo:::plots gedi <- caRlo:::gedi  #--- samples from monte_carlo() ---# samples <- caRlo:::samples  #--- stats from stats_nested() ---# stats <- caRlo:::stats  #--- boostraps from bootstrap_stats() ---# bootstraps <- caRlo:::bootstraps #--- sample ---# monte_carlo(data = plots, nSamp = c(50, 100, 150), iter = 3, cores = cores) #> Simple feature collection with 2700 features and 6 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 784680.6 ymin: 5266360 xmax: 804241.6 ymax: 5283282 #> Projected CRS: ETRS89 / UTM zone 32N #> First 10 features: #>    zmean  zq90  lai iter nSamp method                     geom #> 1   1.47  3.04 0.64    1    50    lhs POINT (796291.6 5268117) #> 2   6.97 17.96 1.79    1    50    lhs POINT (789108.2 5277652) #> 3  19.49 31.08 4.94    1    50    lhs   POINT (801354 5274227) #> 4   7.32 16.66 2.07    1    50    lhs POINT (801516.4 5272321) #> 5  15.01 21.62 4.51    1    50    lhs POINT (801134.4 5277518) #> 6  10.06 17.20 3.65    1    50    lhs POINT (788651.8 5278835) #> 7   3.56 10.17 1.38    1    50    lhs POINT (798963.3 5268920) #> 8   2.81  9.86 0.84    1    50    lhs POINT (792573.6 5271174) #> 9   2.13  6.88 0.91    1    50    lhs POINT (799508.8 5270341) #> 10  0.32  0.71 0.04    1    50    lhs POINT (798180.6 5276603)  #--- generate stats ---# stats_nested(data = samples, cores = cores) #> # A tibble: 15 × 5 #>     iter nSamp method data              statistics        #>    <dbl> <dbl> <chr>  <list>            <list>            #>  1     1    50 lhs    <tibble [50 × 3]> <tibble [42 × 3]> #>  2     2    50 lhs    <tibble [50 × 3]> <tibble [42 × 3]> #>  3     3    50 lhs    <tibble [50 × 3]> <tibble [42 × 3]> #>  4     4    50 lhs    <tibble [50 × 3]> <tibble [42 × 3]> #>  5     5    50 lhs    <tibble [50 × 3]> <tibble [42 × 3]> #>  6     1    50 srs    <tibble [50 × 3]> <tibble [42 × 3]> #>  7     2    50 srs    <tibble [50 × 3]> <tibble [42 × 3]> #>  8     3    50 srs    <tibble [50 × 3]> <tibble [42 × 3]> #>  9     4    50 srs    <tibble [50 × 3]> <tibble [42 × 3]> #> 10     5    50 srs    <tibble [50 × 3]> <tibble [42 × 3]> #> 11     1    50 lpm    <tibble [50 × 3]> <tibble [42 × 3]> #> 12     2    50 lpm    <tibble [50 × 3]> <tibble [42 × 3]> #> 13     3    50 lpm    <tibble [50 × 3]> <tibble [42 × 3]> #> 14     4    50 lpm    <tibble [50 × 3]> <tibble [42 × 3]> #> 15     5    50 lpm    <tibble [50 × 3]> <tibble [42 × 3]>  #--- boostrap statistics ---# bootstrap_stats(data = stats, population = population, cores = cores) #> # A tibble: 378 × 6 #> # Groups:   nSamp, method, statistic, name [378] #>    nSamp method statistic name  data              bootstrap        #>    <dbl> <chr>  <chr>     <chr> <list>            <list>           #>  1   100 lhs    min       zmean <tibble [20 × 1]> <tibble [2 × 6]> #>  2   100 lhs    min       zq90  <tibble [20 × 1]> <tibble [2 × 6]> #>  3   100 lhs    min       lai   <tibble [20 × 1]> <tibble [2 × 6]> #>  4   100 lhs    mean      zmean <tibble [20 × 1]> <tibble [2 × 6]> #>  5   100 lhs    mean      zq90  <tibble [20 × 1]> <tibble [2 × 6]> #>  6   100 lhs    mean      lai   <tibble [20 × 1]> <tibble [2 × 6]> #>  7   100 lhs    max       zmean <tibble [20 × 1]> <tibble [2 × 6]> #>  8   100 lhs    max       zq90  <tibble [20 × 1]> <tibble [2 × 6]> #>  9   100 lhs    max       lai   <tibble [20 × 1]> <tibble [2 × 6]> #> 10   100 lhs    var       zmean <tibble [20 × 1]> <tibble [2 × 6]> #> # … with 368 more rows"},{"path":"https://tgoodbody.github.io/caRlo/index.html","id":"specify-user-defined-functions-for-statistics-using-f","dir":"","previous_headings":"","what":"Specify user defined functions for statistics using .f","title":"caRlo","text":"","code":"#--- function needs to have more than 1 metric to give proper outputs ---#  .f <- function(x) {   #--- calculate the mean and percent of points less than the mean ---#   c(     mean = mean(x),     perc_gr_mean = length(x[x < mean(x)]) / length(x)   ) }  s <- stats_nested(data = samples, cores = cores, .f = .f)  s$statistics[[1]] #> # A tibble: 6 × 3 #>   statistic    name  value #>   <chr>        <chr> <dbl> #> 1 mean         zmean  8.92 #> 2 mean         zq90  17.9  #> 3 mean         lai    2.30 #> 4 perc_gr_mean zmean  0.52 #> 5 perc_gr_mean zq90   0.46 #> 6 perc_gr_mean lai    0.52"},{"path":"https://tgoodbody.github.io/caRlo/reference/apply_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample a data frame using different methods — apply_methods","title":"Sample a data frame using different methods — apply_methods","text":"function takes data frame performs sampling using three different methods: latin hypercube sampling (LHS), simple random sampling (SRS), Latin pseudo-maximum sampling (LPM).","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/apply_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample a data frame using different methods — apply_methods","text":"","code":"apply_methods(data, nSamp, iter, method = NULL, cores = NULL)"},{"path":"https://tgoodbody.github.io/caRlo/reference/apply_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample a data frame using different methods — apply_methods","text":"data data frame sampled. nSamp number samples generate. iter number iterations perform. method method use sampling. Can \"lhs\" Latin Hypercube Sampling, \"srs\" Simple Random Sampling, \"lpm\" else Balanced Sampling. cores Number cores use parallel computation","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/apply_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample a data frame using different methods — apply_methods","text":"data frame containing sampled data using three methods.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/apply_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Sampling Methods to Data — apply_sample","title":"Apply Sampling Methods to Data — apply_sample","text":"function applies one three sampling methods data: Latin Hypercube Sampling (LHS), Simple Random Sampling (SRS), Latin Point Mass Sampling (LPM).","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/apply_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Sampling Methods to Data — apply_sample","text":"","code":"apply_sample(nSamp, iter, method, data)"},{"path":"https://tgoodbody.github.io/caRlo/reference/apply_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Sampling Methods to Data — apply_sample","text":"nSamp number samples generate. iter number iterations perform. method method use sampling. Can \"lhs\" Latin Hypercube Sampling, \"srs\" Simple Random Sampling, \"lpm\" else Balanced Sampling. data data frame sampled.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/apply_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Sampling Methods to Data — apply_sample","text":"data frame containing sampled data, iteration number, number samples, sampling method used.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/apply_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate descriptive statistics for each column in a data frame — apply_stats","title":"Calculate descriptive statistics for each column in a data frame — apply_stats","text":"Given data frame, calculates standard error, minimum, mean, maximum, variance, interquartile range (IQR), decile quantiles column.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/apply_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate descriptive statistics for each column in a data frame — apply_stats","text":"","code":"apply_stats(data, population = FALSE, .f = NULL)"},{"path":"https://tgoodbody.github.io/caRlo/reference/apply_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate descriptive statistics for each column in a data frame — apply_stats","text":"data data frame numeric columns calculate statistics . population Logical defining whether metrics population. population = FALSE standard error calculated. .f User-defined function single parameters. See stdstats() example syntax.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/apply_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate descriptive statistics for each column in a data frame — apply_stats","text":"data frame columns calculated statistic, row represents column input data frame.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/boot_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrapped difference from population mean — boot_mean","title":"Bootstrapped difference from population mean — boot_mean","text":"function computes difference mean given sample population mean using bootstrapping.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/boot_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrapped difference from population mean — boot_mean","text":"","code":"boot_mean(x, i, pop)"},{"path":"https://tgoodbody.github.io/caRlo/reference/boot_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrapped difference from population mean — boot_mean","text":"x vector numerical values. vector indices specifying current bootstrap sample. pop population mean compare .","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/boot_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrapped difference from population mean — boot_mean","text":"difference mean current bootstrap sample population mean.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/boot_median.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrapped difference from population median — boot_median","title":"Bootstrapped difference from population median — boot_median","text":"function computes difference median given sample population median using bootstrapping.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/boot_median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrapped difference from population median — boot_median","text":"","code":"boot_median(x, i, pop)"},{"path":"https://tgoodbody.github.io/caRlo/reference/boot_median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrapped difference from population median — boot_median","text":"x vector numerical values. vector indices specifying current bootstrap sample. pop population median compare .","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/boot_median.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrapped difference from population median — boot_median","text":"difference median current bootstrap sample population median.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/bootstrap_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample bootstrap function — bootstrap_stats","title":"Sample bootstrap function — bootstrap_stats","text":"function performs bootstrapping nested dataframe nested column called statistics.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/bootstrap_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample bootstrap function — bootstrap_stats","text":"","code":"bootstrap_stats(data, population, cores = NULL, R = 10000)"},{"path":"https://tgoodbody.github.io/caRlo/reference/bootstrap_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample bootstrap function — bootstrap_stats","text":"data nested dataframe nested column called statistics. population vector representing population bootstrap samples drawn. cores optional argument indicating number CPU cores use parallel computation. NULL, function runs bootstrap sequentially. R number bootstrap resamples generate.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/bootstrap_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample bootstrap function — bootstrap_stats","text":"nested dataframe additional column bootstrap containing bootstrapped results.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/monte_carlo.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterate over multiple sampling methods and sample sizes — monte_carlo","title":"Iterate over multiple sampling methods and sample sizes — monte_carlo","text":"Iterate multiple sampling methods sample sizes","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/monte_carlo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterate over multiple sampling methods and sample sizes — monte_carlo","text":"","code":"monte_carlo(data, metrics = NULL, nSamp, iter, method = NULL, cores = NULL)"},{"path":"https://tgoodbody.github.io/caRlo/reference/monte_carlo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterate over multiple sampling methods and sample sizes — monte_carlo","text":"data sf type POINT data.frame object metrics vector character strings match desired column names data nSamp numeric scalar greater 0 less number rows data iter numeric scalar greater 0 method method use sampling. Can \"lhs\" Latin Hypercube Sampling, \"srs\" Simple Random Sampling, \"lpm\" else Balanced Sampling. cores Number cores use parallel computation","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/monte_carlo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterate over multiple sampling methods and sample sizes — monte_carlo","text":"list sampled datasets","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/monte_carlo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iterate over multiple sampling methods and sample sizes — monte_carlo","text":"function iterates multiple sampling methods sample sizes using utils_sample(). function assumes users removed coordinate columns data.frame provided. NA values data dropped.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/sample_balanced.html","id":null,"dir":"Reference","previous_headings":"","what":"Balanced sampling — sample_balanced","title":"Balanced sampling — sample_balanced","text":"function performs Latin Point Mass Sampling (LPM) data.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/sample_balanced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Balanced sampling — sample_balanced","text":"","code":"sample_balanced(data, nSamp, p = NULL)"},{"path":"https://tgoodbody.github.io/caRlo/reference/sample_balanced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Balanced sampling — sample_balanced","text":"data data frame sampled. nSamp number samples generate. p probability string","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/sample_balanced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Balanced sampling — sample_balanced","text":"data frame containing sampled data.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/stats_nested.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate nested summary statistics — stats_nested","title":"Calculate nested summary statistics — stats_nested","text":"function takes data frame creates nested data frame grouping columns nSamp, iter, method. calculates summary statistics nested data frame using stats_summary function.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/stats_nested.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate nested summary statistics — stats_nested","text":"","code":"stats_nested(data, metrics = NULL, cores = NULL, .f = NULL)"},{"path":"https://tgoodbody.github.io/caRlo/reference/stats_nested.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate nested summary statistics — stats_nested","text":"data data frame containing data summarized metrics vector metric names summarized. NULL, numeric columns summarized. cores Number cores use parallel computation .f Single parameter statistical function applied","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/stats_nested.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate nested summary statistics — stats_nested","text":"tibble containing nested data frames corresponding summary statistics.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/stats_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Summary Statistics — stats_summary","title":"Compute Summary Statistics — stats_summary","text":"function computes summary statistics numeric columns SpatRaster data.frame. list metrics specified, computes summary statistics columns.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/stats_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Summary Statistics — stats_summary","text":"","code":"stats_summary(data, metrics = NULL, population = FALSE, .f = NULL)"},{"path":"https://tgoodbody.github.io/caRlo/reference/stats_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Summary Statistics — stats_summary","text":"data data frame containing data summarized metrics vector metric names summarized. NULL, numeric columns summarized. population logical indicating whether summary statistics calculated population just sample. Default FALSE. .f Single parameter statistical function applied","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/stats_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Summary Statistics — stats_summary","text":"tibble object containing computed summary statistics.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/stdboot.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard summary — stdboot","title":"Standard summary — stdboot","text":"Standard summary","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/stdboot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard summary — stdboot","text":"","code":"stdboot(x, population, R = 10000)"},{"path":"https://tgoodbody.github.io/caRlo/reference/stdboot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard summary — stdboot","text":"x numeric vector summary statistics computed. population dataframe population statistics R Number bootstrap iterations","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/stdmethods.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Sampling Method to Data — stdmethods","title":"Apply Sampling Method to Data — stdmethods","text":"function applies one three sampling methods data: Latin Hypercube Sampling (LHS), Simple Random Sampling (SRS), Latin Point Mass Sampling (LPM).","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/stdmethods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Sampling Method to Data — stdmethods","text":"","code":"stdmethods(data, nSamp, iter, method)"},{"path":"https://tgoodbody.github.io/caRlo/reference/stdmethods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Sampling Method to Data — stdmethods","text":"data data frame sampled. nSamp number samples generate. iter number iterations perform. method method use sampling. Can \"lhs\" Latin Hypercube Sampling, \"srs\" Simple Random Sampling, \"lpm\" else Balanced Sampling.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/stdmethods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Sampling Method to Data — stdmethods","text":"data frame containing sampled data, iteration number, number samples, sampling method used.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/stdstats.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute summary statistics for a numeric vector — stdstats","title":"Compute summary statistics for a numeric vector — stdstats","text":"function computes standard summary statistics numeric vector, including minimum, mean, maximum, variance, interquartile range (IQR), quantiles 10% intervals 10% 90%.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/stdstats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute summary statistics for a numeric vector — stdstats","text":"","code":"stdstats(x)"},{"path":"https://tgoodbody.github.io/caRlo/reference/stdstats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute summary statistics for a numeric vector — stdstats","text":"x numeric vector summary statistics computed.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/stdstats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute summary statistics for a numeric vector — stdstats","text":"named numeric vector following components: min minimum value x mean mean value x max maximum value x var variance x IQR interquartile range x 10% 10th percentile x 20% 20th percentile x 30% 30th percentile x 40% 40th percentile x 50% 50th percentile (median) x 60% 60th percentile x 70% 70th percentile x 80% 80th percentile x 90% 90th percentile x","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/utils_list_to_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a vector by repeating values from a list — utils_list_to_vector","title":"Create a vector by repeating values from a list — utils_list_to_vector","text":"function takes list values repeats value specified number times create vector.","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/utils_list_to_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a vector by repeating values from a list — utils_list_to_vector","text":"","code":"utils_list_to_vector(nSamp, iter)"},{"path":"https://tgoodbody.github.io/caRlo/reference/utils_list_to_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a vector by repeating values from a list — utils_list_to_vector","text":"nSamp Vector desired sample sizes iter Desired number iterations","code":""},{"path":"https://tgoodbody.github.io/caRlo/reference/utils_list_to_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a vector by repeating values from a list — utils_list_to_vector","text":"vector nSamp length iter","code":""}]
